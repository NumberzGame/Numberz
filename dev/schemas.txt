// See  /dev/schemas.txt
// simple: (72B, 5MB limit => 10 per day for 16 years)

//       key:
//       u60 12B (6 UTF-16 BMP single code units) 

//       key type flag ("C"ustom or "G"raded), u15
//       grade, 1,...,228 u15
//       goal, 100, ..., 999 u15 
//       form, 2, 3, ..., (1, (1, (2, 2))), u15
//       index, (0 to 70_000) u30 
      
//       val:
//       game u... 62B (31 UTF-16 BMP single code units) 

//       Schema index: 2B u15 (1) 
//       timestamp: u45       (3)
//       solved, u15           (1)
//       seeds*6, u90 (6) (14 seeds in normal game, 10 small (twice) 4 large)
//         seed u4
//       ops*5    u75 (5) 
//       current state of this game
//       moves*5 u225   (15)
//         move u9
//           Operand u3 (indices 0, 1, ..., 6).  Can be null.
//           Submitted u1
//           Op u2 (+, -, *, //)


Schema index: 2B u15 (1 UTF-16 BMP single code units) 
currentState currentGame
time_stamp_first_played_mins Date.now() / 1000 / 60 min (u25 8 years from 3rd Dec 2024)

game
game grade u13 (min u8 1,..,223) under current Heuristic (additional difficulty)
game goal u15 (min u10 100,...,999)
game form u10 {min u4 2, 3, 4, (2, 2), 5, (3, 2), (1, (2, 2)), 6, (4, 2), (3, 3), 
(2, (2, 2)), (1, (3, 2)), (1, (1, (2, 2))) },
game index u25, (min u20 max is grade 18 with 781176 (20 bits) non de-duped solutions)
(index all inc forms, and figure out using JSON dict of frequencies?)
time_stamp_first_played_mins Date.now() / 1000 / 60

move
operand one u5 (min u3 Indices: 0, 1, 2, 3, 4, 5)
operand two u5 (min u3)
op u5 (min u2, +, -, //, =)

min: (27B, 5MB limit => 10 per day for 55 years)

      key u38 6B (3 UTF-16 BMP single code units)   
                (does storage space for keys matter if they're hashed?....
                  A: It does - localstorge can iterate through its keys by index. 
                    It is implemented using levelDB 
                    in Chrome, and sqllite in Firefox.  Both are more than 
                    simple hash tables.  
                )      

      grade, 1,...,228 u8
      goal, 100, ..., 999 u10 
      form, 2, 3, ..., (1, (1, (2, 2))), u4
      index, (0 to 70_000) u20 
      
      val:
      game u125 18B (9 UTF-16 BMP single code units)    
      Schema index: 2B u15 (1 ) 
      timestamp: u45 - the vast majority of this won't change, so could store the time-stamp of the
                       user's first visit elsewhere, and change this one into a relative datetime-delta.
                       But it's only 6 Bytes.
      solved, u1
      seeds*6, u24 (14 seeds in normal game, 10 small (twice) 4 large)
        seed u4
      current state of this game
      moves*5 u40
        move u8
          Operand u3 (indices 0, 1, ..., 6)
          Op u2 (+, -, *, //)


simple: (62B, 5MB limit => 10 per day for 20 years)

      key:
      u60 10B (5 UTF-16 BMP single code units) 

      grade, 1,...,228 u15
      goal, 100, ..., 999 u15 
      form, 2, 3, ..., (1, (1, (2, 2))), u15
      index, (0 to 70_000) u30 
      
      val:
      game u... 52B (26 UTF-16 BMP single code units) 

      Schema index: 2B u15 (1) 
      timestamp: u45       (3)
      solved, u15           (1)
      seeds*6, u85 (6) (14 seeds in normal game, 10 small (twice) 4 large)
        seed u4
      current state of this game
      moves*5 u225   (15)
        move u9
          Operand u3 (indices 0, 1, ..., 6)
          Op u2 (+, -, *, //)

or:  game 138B (5MB limit =>  10 a day for 10 years)

      timestamp: u45 6B (3 UTF-16 BMP single code units)
      grade, 1,...,228 2B (1)
      goal, 100, ..., 999 2B (1)
      form, 2, 3, ..., (1, (1, (2, 2))), 2B (1)
      index, (0 to 70_000) 4B (2)
      solved, 2B (1)
      seeds*20, 40B (20)
        seed 2B (1)
      state

      moves*20 80B (40)
        move 4B (2)
          Operand 4 bits min
          Op 2 bits min
